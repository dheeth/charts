installer:
  repo: "dheeth/devtron"
#  For Kubernetes version < 1.16, set release: legacy. You won't be able to upgrade Devtron unless you upgrade the K8s version to 1.16 or above.
  release: "v0.6.0" #You can use a branch name or a release tag name as a release, for gitee as source only "main" is supported as of now
  image: quay.io/devtron/inception
  tag: c62d4c30-185-9354
  source: "github" # Available options are github and gitee
#  mode: "dashboard" # Available options are dashboard, full and hyperion (deprecated) NOT USING THIS
  modules: [] # Available options are cicd
  production_overrides: "" # Set true if you want to use this Devtron stack in Production (This will require more resources)

# Change the below values for full mode only

#Use secrets in plaintext, they'll be encoded to base64 automatically.
secrets: {}
#  If No POSTGRESQL_PASSWORD is provided, a password is automatically generated and saved in secret devtron-secret
#  POSTGRESQL_PASSWORD: "change-me"

#  REQUIRED IF BLOB_STORAGE_PROVIDER=AZURE Token with read write access to AZURE_BLOB_CONTAINER_CI_LOG and AZURE_BLOB_CONTAINER_CI_CACHE
  # AZURE_ACCOUNT_KEY: "xxxxxxxxxx"
configs:
  BLOB_STORAGE_PROVIDER: ""
  ENABLE_LEGACY_API: "false"  # Set to true if you are installing Devtron on a kubernetes version < k8s 1.19
# Amazon AWS S3 bucket and region for storing Build-cache for faster build process. Mandatory if BLOB_STORAGE_PROVIDER is AWS.
  #DEFAULT_CACHE_BUCKET: "change-me"   #Do not include s3://
  #DEFAULT_CACHE_BUCKET_REGION: "us-east-1"
# Amazon AWS S3 bucket and region for storing Build-logs. Mandatory if BLOB_STORAGE_PROVIDER is AWS.
  #DEFAULT_BUILD_LOGS_BUCKET: "change-me"   #Do not include s3://
  #DEFAULT_CD_LOGS_BUCKET_REGION: "us-east-1"
# Amazon AWS Secret Region if you will be using AWS Secret manager for storing secrets.
  #EXTERNAL_SECRET_AMAZON_REGION: ""
# Azure Blob storage Info for storing Build Logs and Build cache for faster build process.
  #AZURE_ACCOUNT_NAME: "test-account"
  #AZURE_BLOB_CONTAINER_CI_LOG: "ci-log-container"
  #AZURE_BLOB_CONTAINER_CI_CACHE: "ci-cache-container"

# Change the below values for hyperion only mode (Refer https://docs.devtron.ai/#hyperion )
components:
  dashboard:
    config:
      analytics: "false"
      hotjar: "false"
      sentry: "false"
      sentryEnv: "PRODUCTION"
      applicationMetrics: "true"
    image: "quay.io/devtron/test:b1f640fb-3233-2239"
    imagePullPolicy: IfNotPresent

  devtron:
    image: "quay.io/devtron/hyperion:244d7a74-282-10614"
    cicdImage: "quay.io/devtron/devtron:244d7a74-313-10613"
    imagePullPolicy: IfNotPresent
    customOverrides: {}
    serviceMonitor:
      enabled: false
    service:
      type: LoadBalancer
      port: 80
      # nodePort: 32080
      labels: {}
      annotations: {}
      loadBalancerSourceRanges: []
    ingress:
      enabled: false
      className: nginx
      labels: {}
      annotations: {}
        # kubernetes.io/tls-acme: "true"
      pathType: ImplementationSpecific
      host: devtron.example.com
      tls: []
      #  - secretName: devtron-tls
      #    hosts:
      #      - devtron.example.com

  argocdDexServer:
    image: "ghcr.io/dexidp/dex:v2.30.2"
    imagePullPolicy: IfNotPresent
    initContainer:
      authenticator: "quay.io/devtron/authenticator:aecda793-381-10540"

  kubelink:
    image: "quay.io/devtron/kubelink:919924e0-309-10348"
    imagePullPolicy: IfNotPresent

  postgres:
    image: "quay.io/devtron/postgres:11.9.0-debian-10-r26"
    imagePullPolicy: "IfNotPresent"
    persistence:
      volumeSize: "20Gi"

  migrator:
    image: "quay.io/devtron/migrator:9c933d29-149-10140"
    envVars:
      devtron:
        GIT_BRANCH: "modules"
        SCRIPT_LOCATION: "scripts/sql/"
        GIT_REPO_URL: "https://github.com/devtron-labs/devtron.git"
        DB_NAME: "orchestrator"
        GIT_HASH: "643d0cdec4bfe98d30e4d81d2ac9b5b2e6238ea4"
      casbin:
        GIT_BRANCH: "main"
        SCRIPT_LOCATION: "scripts/casbin/"
        GIT_REPO_URL: "https://github.com/devtron-labs/devtron.git"
        DB_NAME: "casbin"
        GIT_HASH: "b2ad8a35e51d5df63aeaeb583b7166649171e36f"


argo-cd:
  enabled: false
  fullnameOverride: "argocd"
  configs:
    secret:
      createSecret: false
  # argocd-application-controller
  controller:
    args:
      # -- define the application controller `--status-processors`
      statusProcessors: "50"
      # -- define the application controller `--operation-processors`
      operationProcessors: "25"
      # -- define the application controller `--app-hard-resync`
      appHardResyncPeriod: "0"
      # -- define the application controller `--app-resync`
      appResyncPeriod: "180"
      # -- define the application controller `--self-heal-timeout-seconds`
      selfHealTimeout: "5"
      # -- define the application controller `--repo-server-timeout-seconds`
      repoServerTimeoutSeconds: "200"
    extraArgs:
    - --kubectl-parallelism-limit
    - "35"
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - all
      readOnlyRootFilesystem: true
      runAsNonRoot: true
    env:
    - name: ARGOCD_RECONCILIATION_TIMEOUT
      valueFrom:
        configMapKeyRef:
          key: timeout.reconciliation
          name: argocd-cm
          optional: true
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-application-controller
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
  # argocd-dex-server
  dex:
    enabled: false
  
  redis:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-redis
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    
  server:
    configEnabled: false
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-server
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - all
      readOnlyRootFilesystem: true
      runAsNonRoot: true
    rbacConfig:
      policy.default: role:admin
  repoServer:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-repo-server
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    extraArgs:
    - --repo-cache-expiration
    - 24h
    - --parallelismlimit
    - "50"
    env:
    - name: ARGOCD_RECONCILIATION_TIMEOUT
      valueFrom:
        configMapKeyRef:
          key: timeout.reconciliation
          name: argocd-cm
          optional: true
    - name: ARGOCD_EXEC_TIMEOUT
      value: 180s
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - all
      readOnlyRootFilesystem: true
      runAsNonRoot: true
  applicationSet:
    enabled: false
  notifications:
    enabled: false

security:
  enabled: false
  clair:
    enabled: false
    fullnameOverride: clair

notifier:
  enabled: false
  imagePullPolicy: IfNotPresent
  image: "quay.io/devtron/notifier:0ba0e243-372-10146"
  configs:
    CD_ENVIRONMENT: PROD
    DB: orchestrator
    DB_HOST: postgresql-postgresql.devtroncd
    DB_PORT: "5432"
    DB_USER: postgres
  secrets: {}
  dbconfig:
    secretName: postgresql-postgresql
    keyName: postgresql-password
  resources: {}

minio:
  enabled: false
  replicaCount: 1
  image: "quay.io/devtron/minio:RELEASE.2021-02-14T04-01-33Z"
  imagePullPolicy: IfNotPresent
  mbImage: "quay.io/devtron/minio-mc:RELEASE.2021-02-14T04-28-06Z"
  mbImagePullPolicy: IfNotPresent

workflowController:
  image: "quay.io/argoproj/workflow-controller:v3.0.7"
  executorImage: "quay.io/argoproj/argoexec:v3.0.7"

monitoring:
  grafana:
    enabled: false
    image: "quay.io/devtron/grafana:7.3.1"
    imagePullPolicy: IfNotPresent
    resources: {}
    grafanaDashboards:
      image: "quay.io/kiwigrid/k8s-sidecar:1.1.0"
      imagePullPolicy: IfNotPresent
      resources: {}
    persistence:
      storage: "2Gi"

external-secrets:
  enabled: false